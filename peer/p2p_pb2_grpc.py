# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import p2p_pb2 as p2p__pb2


class FileServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ListFiles = channel.unary_unary(
                '/p2p.FileService/ListFiles',
                request_serializer=p2p__pb2.ListFilesRequest.SerializeToString,
                response_deserializer=p2p__pb2.ListFilesResponse.FromString,
                )
        self.RequestFile = channel.unary_stream(
                '/p2p.FileService/RequestFile',
                request_serializer=p2p__pb2.RequestFileRequest.SerializeToString,
                response_deserializer=p2p__pb2.FileChunk.FromString,
                )
        self.DiscoverFile = channel.unary_unary(
                '/p2p.FileService/DiscoverFile',
                request_serializer=p2p__pb2.DiscoverFileRequest.SerializeToString,
                response_deserializer=p2p__pb2.DiscoverFileResponse.FromString,
                )
        self.ListAllFiles = channel.unary_unary(
                '/p2p.FileService/ListAllFiles',
                request_serializer=p2p__pb2.ListAllFilesRequest.SerializeToString,
                response_deserializer=p2p__pb2.ListAllFilesResponse.FromString,
                )


class FileServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ListFiles(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RequestFile(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DiscoverFile(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListAllFiles(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_FileServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ListFiles': grpc.unary_unary_rpc_method_handler(
                    servicer.ListFiles,
                    request_deserializer=p2p__pb2.ListFilesRequest.FromString,
                    response_serializer=p2p__pb2.ListFilesResponse.SerializeToString,
            ),
            'RequestFile': grpc.unary_stream_rpc_method_handler(
                    servicer.RequestFile,
                    request_deserializer=p2p__pb2.RequestFileRequest.FromString,
                    response_serializer=p2p__pb2.FileChunk.SerializeToString,
            ),
            'DiscoverFile': grpc.unary_unary_rpc_method_handler(
                    servicer.DiscoverFile,
                    request_deserializer=p2p__pb2.DiscoverFileRequest.FromString,
                    response_serializer=p2p__pb2.DiscoverFileResponse.SerializeToString,
            ),
            'ListAllFiles': grpc.unary_unary_rpc_method_handler(
                    servicer.ListAllFiles,
                    request_deserializer=p2p__pb2.ListAllFilesRequest.FromString,
                    response_serializer=p2p__pb2.ListAllFilesResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'p2p.FileService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class FileService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ListFiles(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/p2p.FileService/ListFiles',
            p2p__pb2.ListFilesRequest.SerializeToString,
            p2p__pb2.ListFilesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RequestFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/p2p.FileService/RequestFile',
            p2p__pb2.RequestFileRequest.SerializeToString,
            p2p__pb2.FileChunk.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DiscoverFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/p2p.FileService/DiscoverFile',
            p2p__pb2.DiscoverFileRequest.SerializeToString,
            p2p__pb2.DiscoverFileResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListAllFiles(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/p2p.FileService/ListAllFiles',
            p2p__pb2.ListAllFilesRequest.SerializeToString,
            p2p__pb2.ListAllFilesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
